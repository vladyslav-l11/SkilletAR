//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 39 localization keys.
    struct localizable {
      /// Value: chin_joint
      static let chinJoint = Rswift.StringResource(key: "chin.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: head_joint
      static let headJoint = Rswift.StringResource(key: "head.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hips_joint
      static let hipsJoint = Rswift.StringResource(key: "hips.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: jaw_joint
      static let jawJoint = Rswift.StringResource(key: "jaw.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_arm_joint
      static let leftArmJoint = Rswift.StringResource(key: "left.arm.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_eyeLowerLid_joint
      static let leftEyeLowerLidJoint = Rswift.StringResource(key: "left.eyeLowerLid.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_eyeUpperLid_joint
      static let leftEyeUpperLidJoint = Rswift.StringResource(key: "left.eyeUpperLid.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_eye_joint
      static let leftEyeJoint = Rswift.StringResource(key: "left.eye.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_eyeball_joint
      static let leftEyeballJoint = Rswift.StringResource(key: "left.eyeball.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_foot_joint
      static let leftFootJoint = Rswift.StringResource(key: "left.foot.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_forearm_joint
      static let leftForearmJoint = Rswift.StringResource(key: "left.forearm.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_hand
      static let leftHand = Rswift.StringResource(key: "left.hand", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_hand_joint
      static let leftHandJoint = Rswift.StringResource(key: "left.hand.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_leg_joint
      static let leftLegJoint = Rswift.StringResource(key: "left.leg.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_shoulder_1_joint
      static let leftShoulderJoint = Rswift.StringResource(key: "left.shoulder.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_toes
      static let leftToes = Rswift.StringResource(key: "left.toes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_upLeg_joint
      static let leftUpLegJoint = Rswift.StringResource(key: "left.upLeg.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: neck_1_joint
      static let neck1Joint = Rswift.StringResource(key: "neck.1.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: neck_2_joint
      static let neck2Joint = Rswift.StringResource(key: "neck.2.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: neck_3_joint
      static let neck3Joint = Rswift.StringResource(key: "neck.3.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: neck_4_joint
      static let neck4Joint = Rswift.StringResource(key: "neck.4.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: nose_joint
      static let noseJoint = Rswift.StringResource(key: "nose.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_arm_joint
      static let rightArmJoint = Rswift.StringResource(key: "right.arm.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_eyeLowerLid_joint
      static let rightEyeLowerLidJoint = Rswift.StringResource(key: "right.eyeLowerLid.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_eyeUpperLid_joint
      static let rightEyeUpperLidJoint = Rswift.StringResource(key: "right.eyeUpperLid.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_eye_joint
      static let rightEyeJoint = Rswift.StringResource(key: "right.eye.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_eyeball_joint
      static let rightEyeballJoint = Rswift.StringResource(key: "right.eyeball.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_foot_joint
      static let rightFootJoint = Rswift.StringResource(key: "right.foot.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_forearm_joint
      static let rightForearmJoint = Rswift.StringResource(key: "right.forearm.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_hand
      static let rightHand = Rswift.StringResource(key: "right.hand", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_hand_joint
      static let rightHandJoint = Rswift.StringResource(key: "right.hand.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_leg_joint
      static let rightLegJoint = Rswift.StringResource(key: "right.leg.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_shoulder_1_joint
      static let rightShoulderJoint = Rswift.StringResource(key: "right.shoulder.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_toes
      static let rightToes = Rswift.StringResource(key: "right.toes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_upLeg_joint
      static let rightUpLegJoint = Rswift.StringResource(key: "right.upLeg.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spine_
      static let spine = Rswift.StringResource(key: "spine", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spine_5_joint
      static let spine5Joint = Rswift.StringResource(key: "spine.5.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spine_6_joint
      static let spine6Joint = Rswift.StringResource(key: "spine.6.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spine_7_joint
      static let spine7Joint = Rswift.StringResource(key: "spine.7.joint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: chin_joint
      static func chinJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chin.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chin.joint"
        }

        return NSLocalizedString("chin.joint", bundle: bundle, comment: "")
      }

      /// Value: head_joint
      static func headJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("head.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "head.joint"
        }

        return NSLocalizedString("head.joint", bundle: bundle, comment: "")
      }

      /// Value: hips_joint
      static func hipsJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hips.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hips.joint"
        }

        return NSLocalizedString("hips.joint", bundle: bundle, comment: "")
      }

      /// Value: jaw_joint
      static func jawJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jaw.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "jaw.joint"
        }

        return NSLocalizedString("jaw.joint", bundle: bundle, comment: "")
      }

      /// Value: left_arm_joint
      static func leftArmJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.arm.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.arm.joint"
        }

        return NSLocalizedString("left.arm.joint", bundle: bundle, comment: "")
      }

      /// Value: left_eyeLowerLid_joint
      static func leftEyeLowerLidJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.eyeLowerLid.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.eyeLowerLid.joint"
        }

        return NSLocalizedString("left.eyeLowerLid.joint", bundle: bundle, comment: "")
      }

      /// Value: left_eyeUpperLid_joint
      static func leftEyeUpperLidJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.eyeUpperLid.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.eyeUpperLid.joint"
        }

        return NSLocalizedString("left.eyeUpperLid.joint", bundle: bundle, comment: "")
      }

      /// Value: left_eye_joint
      static func leftEyeJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.eye.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.eye.joint"
        }

        return NSLocalizedString("left.eye.joint", bundle: bundle, comment: "")
      }

      /// Value: left_eyeball_joint
      static func leftEyeballJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.eyeball.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.eyeball.joint"
        }

        return NSLocalizedString("left.eyeball.joint", bundle: bundle, comment: "")
      }

      /// Value: left_foot_joint
      static func leftFootJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.foot.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.foot.joint"
        }

        return NSLocalizedString("left.foot.joint", bundle: bundle, comment: "")
      }

      /// Value: left_forearm_joint
      static func leftForearmJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.forearm.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.forearm.joint"
        }

        return NSLocalizedString("left.forearm.joint", bundle: bundle, comment: "")
      }

      /// Value: left_hand
      static func leftHand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.hand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.hand"
        }

        return NSLocalizedString("left.hand", bundle: bundle, comment: "")
      }

      /// Value: left_hand_joint
      static func leftHandJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.hand.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.hand.joint"
        }

        return NSLocalizedString("left.hand.joint", bundle: bundle, comment: "")
      }

      /// Value: left_leg_joint
      static func leftLegJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.leg.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.leg.joint"
        }

        return NSLocalizedString("left.leg.joint", bundle: bundle, comment: "")
      }

      /// Value: left_shoulder_1_joint
      static func leftShoulderJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.shoulder.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.shoulder.joint"
        }

        return NSLocalizedString("left.shoulder.joint", bundle: bundle, comment: "")
      }

      /// Value: left_toes
      static func leftToes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.toes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.toes"
        }

        return NSLocalizedString("left.toes", bundle: bundle, comment: "")
      }

      /// Value: left_upLeg_joint
      static func leftUpLegJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left.upLeg.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "left.upLeg.joint"
        }

        return NSLocalizedString("left.upLeg.joint", bundle: bundle, comment: "")
      }

      /// Value: neck_1_joint
      static func neck1Joint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("neck.1.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "neck.1.joint"
        }

        return NSLocalizedString("neck.1.joint", bundle: bundle, comment: "")
      }

      /// Value: neck_2_joint
      static func neck2Joint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("neck.2.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "neck.2.joint"
        }

        return NSLocalizedString("neck.2.joint", bundle: bundle, comment: "")
      }

      /// Value: neck_3_joint
      static func neck3Joint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("neck.3.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "neck.3.joint"
        }

        return NSLocalizedString("neck.3.joint", bundle: bundle, comment: "")
      }

      /// Value: neck_4_joint
      static func neck4Joint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("neck.4.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "neck.4.joint"
        }

        return NSLocalizedString("neck.4.joint", bundle: bundle, comment: "")
      }

      /// Value: nose_joint
      static func noseJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nose.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nose.joint"
        }

        return NSLocalizedString("nose.joint", bundle: bundle, comment: "")
      }

      /// Value: right_arm_joint
      static func rightArmJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.arm.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.arm.joint"
        }

        return NSLocalizedString("right.arm.joint", bundle: bundle, comment: "")
      }

      /// Value: right_eyeLowerLid_joint
      static func rightEyeLowerLidJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.eyeLowerLid.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.eyeLowerLid.joint"
        }

        return NSLocalizedString("right.eyeLowerLid.joint", bundle: bundle, comment: "")
      }

      /// Value: right_eyeUpperLid_joint
      static func rightEyeUpperLidJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.eyeUpperLid.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.eyeUpperLid.joint"
        }

        return NSLocalizedString("right.eyeUpperLid.joint", bundle: bundle, comment: "")
      }

      /// Value: right_eye_joint
      static func rightEyeJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.eye.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.eye.joint"
        }

        return NSLocalizedString("right.eye.joint", bundle: bundle, comment: "")
      }

      /// Value: right_eyeball_joint
      static func rightEyeballJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.eyeball.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.eyeball.joint"
        }

        return NSLocalizedString("right.eyeball.joint", bundle: bundle, comment: "")
      }

      /// Value: right_foot_joint
      static func rightFootJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.foot.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.foot.joint"
        }

        return NSLocalizedString("right.foot.joint", bundle: bundle, comment: "")
      }

      /// Value: right_forearm_joint
      static func rightForearmJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.forearm.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.forearm.joint"
        }

        return NSLocalizedString("right.forearm.joint", bundle: bundle, comment: "")
      }

      /// Value: right_hand
      static func rightHand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.hand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.hand"
        }

        return NSLocalizedString("right.hand", bundle: bundle, comment: "")
      }

      /// Value: right_hand_joint
      static func rightHandJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.hand.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.hand.joint"
        }

        return NSLocalizedString("right.hand.joint", bundle: bundle, comment: "")
      }

      /// Value: right_leg_joint
      static func rightLegJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.leg.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.leg.joint"
        }

        return NSLocalizedString("right.leg.joint", bundle: bundle, comment: "")
      }

      /// Value: right_shoulder_1_joint
      static func rightShoulderJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.shoulder.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.shoulder.joint"
        }

        return NSLocalizedString("right.shoulder.joint", bundle: bundle, comment: "")
      }

      /// Value: right_toes
      static func rightToes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.toes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.toes"
        }

        return NSLocalizedString("right.toes", bundle: bundle, comment: "")
      }

      /// Value: right_upLeg_joint
      static func rightUpLegJoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right.upLeg.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "right.upLeg.joint"
        }

        return NSLocalizedString("right.upLeg.joint", bundle: bundle, comment: "")
      }

      /// Value: spine_
      static func spine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spine", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spine"
        }

        return NSLocalizedString("spine", bundle: bundle, comment: "")
      }

      /// Value: spine_5_joint
      static func spine5Joint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spine.5.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spine.5.joint"
        }

        return NSLocalizedString("spine.5.joint", bundle: bundle, comment: "")
      }

      /// Value: spine_6_joint
      static func spine6Joint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spine.6.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spine.6.joint"
        }

        return NSLocalizedString("spine.6.joint", bundle: bundle, comment: "")
      }

      /// Value: spine_7_joint
      static func spine7Joint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spine.7.joint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spine.7.joint"
        }

        return NSLocalizedString("spine.7.joint", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
